#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define BVH_CREATION

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./includes.glsl"

void unifyNodeBox(const int idx){
    // initial for unify box
    ivec4 comp = imageLoad(bvhMeta, idx)-1; // meta of contributable
    if (comp.x != comp.y && comp.x >= 0) {
        int lft = comp.x, rgh = comp.x+1, sibid = lft >> 1;

        // get contributors boxes
        mat4 lrbox = mat4(bvhBoxesWork[lft][0], bvhBoxesWork[rgh][0], bvhBoxesWork[lft][1], bvhBoxesWork[rgh][1]);

        // contribute to current node
        bvhBoxesWork[idx] = vec4[2](min(lrbox[0], lrbox[1]), max(lrbox[2], lrbox[3]));

        // transpose and compress boxes of contributors
        lrbox = transpose(lrbox);

        // transposed save
    #ifdef USE_F32_BVH
        fvec4_ resulting[4] = { fvec4_(lrbox[0]), fvec4_(lrbox[1]), fvec4_(lrbox[2]), fvec4_(lrbox[3]) };
    #else
        uvec4 resulting[4] = {
            uvec4( packHalf16x4( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[0])) ), 0u, 0u),
            uvec4( packHalf16x4( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[1])) ), 0u, 0u),
            uvec4( packHalf16x4( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[2])) ), 0u, 0u),
            uvec4( packHalf16x4( fma(fvec4_(-1e-3f.xx, 1e-3f.xx), fvec4_(0.5f.xxxx), fvec4_(lrbox[3])) ), 0u, 0u)
        };
    #endif

        // store boxes for outputs
        bvhBoxesResulting[sibid] = resulting;
    }
}

LOCAL_SIZE_LAYOUT;

// shared memory counters
//shared int _counters[8];
//#define _counters[3]

// define function for increment
//initAtomicSubgroupIncFunction(_counters[0], aCounterInc, 1, int)

void main() {
    const int gS = int(gl_WorkGroupSize.x);
    const int wgs = int(gl_NumWorkGroups.x);
    const int wID = int(gl_WorkGroupID.x);
    const int lID = int(Local_Idx);
    const int rng = gS*wgs;
    const int wsize = bvhBlock.creatorUniform.leafCount;

    for (int w=0;w<wsize;w+=rng) {
        SB_BARRIER
        const int globalID = w + (wID * gS + lID);
        IFALL (globalID >= wsize) break;

        int idx = globalID < wsize ? exchange(LeafIndices[globalID], 0)-1 : -1;

        [[unroll, dependency_length(4)]]
        for (int l=0;l<65536;l++) {

            // unify boxes for parent
            if ( idx >= 0 ) { unifyNodeBox(idx); } else { break; }

            // unify box for current and add parent
            int pid = idx >= 0 ? (imageLoad(bvhMeta, idx).z-1) : -1;
            idx = (pid >= 0 && atomicCompSwap(Flags[pid], 0, 1) == 1) ? pid : -1;
        }
    }

    LGROUP_BARRIER
}