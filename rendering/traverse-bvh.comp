#version 460 core
#extension GL_GOOGLE_include_directive : enable

// THIS shader now not part of ray tracing pipeline - it part of BVH processing system

#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING // store rays in registers if possible
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/morton.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"

//#define USE_STACKLESS_BVH
#include "./submodules/shared-data.glsl"
#include "./submodules/traverse-bvh2.glsl"

LOCAL_SIZE_LAYOUT;

void main() {
    int wsize = PREPARED_COUNT;
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 1000000);
    int wgs = int(gl_NumWorkGroups);
    cacheID = int(gl_GlobalInvocationID.x);

    for (int w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        int it = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x);
        bool_ overflow = bool_(it >= wsize);
        IFALL(overflow) break;

        // do BVH traversing 
        traverseBvh2(not(overflow), unorderedRays[it]);

        { // verify intersection
            const int triID = floatBitsToInt(geometrySpace.lastIntersection.w)-1;
            const int itri = triID*9;
            const mat3 vT = transpose(mat3(
                vec3(lvtx[itri+0], lvtx[itri+1], lvtx[itri+2]),
                vec3(lvtx[itri+3], lvtx[itri+4], lvtx[itri+5]),
                vec3(lvtx[itri+6], lvtx[itri+7], lvtx[itri+8])
            ));
            const vec3 e1 = vT[1]-vT[0], e2 = vT[2]-vT[0];

            bool_ vintersect = lessF(geometrySpace.lastIntersection.z, INFINITY-0.001f) & bool_(triID >= 0);
            IFANY (vintersect) {
                int hid = floatBitsToInt(currentRayTmp.origin.w)-1;

                vintersect &= bool_(hid < 0).x | lessF(geometrySpace.lastIntersection.z, hits[hid].uvt.z);
                IF (vintersect) {
                    hid = hid >= 0 ? hid : atomicIncHT();

                    // save hit
                    HitData hit = hits[hid];
                    hit.uvt = geometrySpace.lastIntersection;
                    hit.rayID = it+1;
                    hit.payloadID = 0;
                    hit.materialID = materials[triID];
                    hit.next = 0;
                    hit.normal.xyz = normalize(cross(e1, e2));
                    hit.tangent = vec4(0.f);
                    hit.bitangent = vec4(0.f);
                    hit.texcoord = vec4(0.f);
                    hits[hid] = hit;

                    // link hit
                    currentRayTmp.origin.w = intBitsToFloat(hid+1);
                }
            }
        }

        // save for some-next operations (for example, hit chaining)
        unorderedRays[it] = currentRayTmp;
    }
}
