#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define CACHE_HIT_PAYLOAD
#define DMA_HIT

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/uniforms.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "../include/mathlib.glsl"

struct Material {
     vec4 diffuse;
     vec4 specular;
     vec4 transmission;
     vec4 emissive;

     float ior;
     float roughness;
     float alpharef;
     float unk0f;

     uint diffuseTexture;
     uint specularTexture;
     uint bumpTexture;
     uint emissiveTexture;

     int flags;
     int alphafunc;
     int binding;
     int bitfield;
};

#define SETS_DESC_SET_ID 1
const uint MAX_TEXTURES = 64, MAX_SAMPLERS = 16;


// textrue/sampler set
layout ( binding = 0, set = SETS_DESC_SET_ID ) uniform texture2D textures[MAX_TEXTURES];
layout ( binding = 1, set = SETS_DESC_SET_ID ) uniform sampler samplers[MAX_SAMPLERS];

// material set (in main descriptor set)
layout ( std430, binding = 2, set = SETS_DESC_SET_ID ) readonly buffer submatsB {Material submats[]; };
layout ( std430, binding = 3, set = SETS_DESC_SET_ID ) readonly buffer vtexuresB {uvec2 vtexures[]; };


int matID = -1;
#define material submats[matID]



// validate texture object
bool validateTexture(const uint tbinding) {
    int _binding = int(tbinding)-1;
    return _binding >= 0;
}

//#define vSampler2D(m) sampler2D(textures[vtexures[nonuniformEXT(m)].x], samplers[vtexures[nonuniformEXT(m)].y]) // reserved
#define vSampler2D(m) sampler2D(textures[vtexures[m].x], samplers[vtexures[m].y])
#define fetchTexture(tbinding, tcoord) textureLod(vSampler2D(tbinding-1), tcoord, 0)
#define fetchTextureOffset(tbinding, tcoord, toffset) textureLodOffset(vSampler2D(tbinding-1), tcoord, 0, toffset)


vec4 fetchDiffuse(in vec2 texcoord){
    const uint tbinding = material.diffuseTexture;
    const vec4 rslt = validateTexture(tbinding) ? fetchTexture(tbinding, texcoord) : material.diffuse;
    return rslt;
}

vec4 fetchSpecular(in vec2 texcoord){
    const uint tbinding = material.specularTexture;
    const vec4 rslt = validateTexture(tbinding) ? fetchTexture(tbinding, texcoord) : material.specular;
    return rslt;
}

vec4 fetchEmission(in vec2 texcoord){
    const uint tbinding = material.emissiveTexture;
    const vec4 rslt = validateTexture(tbinding) ? fetchTexture(tbinding, texcoord) : material.emissive;
    return rslt;
}



#ifdef ENABLE_POM
const float parallaxScale = 0.02f;
const float minLayers = 10, maxLayers = 20;
const int refLayers = 10;
vec2 parallaxMapping(in vec3 V, in vec2 T, out float parallaxHeight) {
    const uint tbinding = material.bumpTexture;

    float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0, 0, 1), V)));
    float layerHeight = 1.0f / numLayers;
    vec2 dtex = parallaxScale * V.xy / V.z * layerHeight;
    vec3 chv = vec3(-dtex, layerHeight);
    
    // start pos
    vec3 chd_a = vec3(T, 0.f), chd_b = chd_a;

    // parallax sample tracing 
    for(int l=0;l<256;l++){
        float heightFromTexture = 1.f-fetchTexture(tbinding, chd_b.xy).z;
        if ( heightFromTexture <= chd_b.z ) break;
        chd_a = chd_b, chd_b += chv;
    }
    
    // refinement
    [[unroll]]
    for(int l=0;l<refLayers;l++){
        vec3 chd = mix(chd_a, chd_b, 0.5f);
        float heightFromTexture = 1.f-fetchTexture(tbinding, chd.xy).z;
        if ( heightFromTexture <= chd.z ) { chd_b = chd; } else { chd_a = chd; }
    }

    // do occlusion
    float nextH	= (1.f-fetchTexture(tbinding, chd_b.xy).z) - chd_b.z;
    float prevH = (1.f-fetchTexture(tbinding, chd_a.xy).z) - chd_a.z;

    float dvh = (nextH - prevH);
    float weight = nextH / precIssue(dvh);
    
    parallaxHeight = chd_b.z+mix(nextH, prevH, weight);
    return mix(chd_b.xy, chd_a.xy, weight);
}
#endif


// generated normal mapping
vec3 getUVH(in vec2 texcoord){ return vec3(texcoord, fetchTexture(material.bumpTexture, texcoord).x); }
vec3 getNormalMapping(in vec2 texcoordi) {
    const uint tbinding = material.bumpTexture;
    const vec3 tc = validateTexture(tbinding) ? fetchTexture(tbinding, texcoordi).xyz : vec3(0.5f, 0.5f, 1.0f);

    vec3 normal = vec3(0.f,0.f,1.f);
    IF (equalF(tc.x, tc.y) & equalF(tc.x, tc.z)) {
        vec2 txs = 1.f/textureSize(sampler2D(textures[tbinding], samplers[0]), 0);
        vec4 tx4 = vec4(-txs.xy, txs.xy)*0.5f;
        vec4 txu = vec4(-1.f,-1.f,1.f,1.f)*0.5f;

        const float hsize = 4.f;
        vec3 t00 = vec3(txu.xy, getUVH(texcoordi + tx4.xy).z) * vec3(1.f, 1.f, hsize);
        vec3 t01 = vec3(txu.xw, getUVH(texcoordi + tx4.xw).z) * vec3(1.f, 1.f, hsize);
        vec3 t10 = vec3(txu.zy, getUVH(texcoordi + tx4.zy).z) * vec3(1.f, 1.f, hsize);
        vec3 bump = normalize(cross( t01 - t00, t10 - t00 ));
        normal = faceforward(bump, -bump, normal);
    } else {
        normal = normalize(fmix(vec3(0.0f, 0.0f, 1.0f), fma(tc, vec3(2.0f), vec3(-1.0f)), vec3(1.0f))), normal.y *= -1.f;
    }

    return normal;
}

struct Textured {
    vec4 diffuse;
    vec4 specular;
    vec4 bump;
    vec4 emissive;
} textured;

#define cray rayBlockNodes[rayID / R_BLOCK_SIZE][rayID % R_BLOCK_SIZE].data

LOCAL_SIZE_LAYOUT;

#ifdef CACHE_HIT_PAYLOAD
shared HitPayload hitPayloadCache[WORK_SIZE];
#endif

void main() {
    int wsize = int(arcounter.hT);
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 1000000);
    bool overflow = false;
    int wgs = int(gl_NumWorkGroups);
    int rayID = -1;
    for (int w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x);
        bool overflow = overflow || globalID >= wsize || globalID < 0;
        
        matID = -1;
        IFALL(overflow) break;
        {
#ifdef DMA_HIT
            #define hit hits[globalID]
#else
            HitData hit = hits[globalID];
#endif
            rayID = hit.rayID-1;

#ifdef CACHE_HIT_PAYLOAD
            #define hitp hitPayloadCache[Local_Idx]
            hitp = hitPayload[hit.payloadID-1];
#else
            HitPayload hitp = hitPayload[hit.payloadID-1];
#endif

            vec3 viewVec = dcts(cray.cdirect.xy);
            vec3 rorigin = cray.origin.xyz;
            globalInvocationSMP = globalID;

            matID = hit.materialID - RAY_BLOCK materialUniform.materialOffset;
            bool overflow = overflow || rayID < 0 || (matID >= RAY_BLOCK materialUniform.materialCount || matID < 0);

            // static colors
            textured.diffuse = material.diffuse;
            textured.bump = vec4(0.f, 0.f, 1.f, 1.f);
            textured.specular = material.specular;
            textured.emissive = material.emissive;

            // AMD not supported per-lane texture data loading, if texture index is not constant
            vec2 texcoord = hit.texcoord.xy;
            vec3 normal = hit.normal.xyz;
            vec3 bitang = hit.bitangent.xyz;
            vec3 tangent = hit.tangent.xyz;

            mat3 tbn = transpose(mat3(tangent.xyz, bitang.xyz, normal.xyz));
            vec3 pV = normalize(tbn * (-viewVec * hit.uvt.z));
            float hW = 0.f;

#ifndef PLAIN_BINDLESS_TEXTURE_FETCH
            bool wasTextured = false;
            [[unroll]]
            for (int wl=0;wl<Wave_Size_RT;wl++) {
                IFALL(wasTextured) break;
                if (!wasTextured && readLane(hit.materialID, wl) == hit.materialID) { // don't occupy warpy
                    wasTextured = true;
#endif
#ifdef ENABLE_POM
                    SB_BARRIER
                    texcoord = parallaxMapping(pV, texcoord, hW);
#endif
                    SB_BARRIER
                    textured.bump.xyz = getNormalMapping(texcoord);
                    SB_BARRIER
                    textured.diffuse = fetchDiffuse(texcoord);
                    SB_BARRIER
                    textured.specular = fetchSpecular(texcoord);
                    SB_BARRIER
                    textured.emissive = fetchEmission(texcoord);
                    SB_BARRIER
#ifndef PLAIN_BINDLESS_TEXTURE_FETCH
                }
            }
#endif

            vec4 diffuse = textured.diffuse; diffuse.xyz = toLinear(max(diffuse.xyz, vec3(0.f)));
            vec4 emission = textured.emissive; emission.xyz = toLinear(max(emission.xyz, vec3(0.f)));
            vec4 spc = clamp01(textured.specular);

            // default normal
            hitp.normalHeight.xyz = normal.xyz;

            if (validateTexture(material.bumpTexture)) { // block TBN change manually if non valid normal mapped texture
                hitp.normalHeight.xyz = textured.bump.xyz * tbn; // apply TBN with normal mapping
            }

            // if normal goes wrong, restore normal
            if ((length(hitp.normalHeight.xyz) <= 1e-5) || (length(hitp.normalHeight.xyz) >= INFINITY) || any(isnan(hitp.normalHeight.xyz)) || any(isinf(hitp.normalHeight.xyz)) || dot(hitp.normalHeight.xyz, normal.xyz) <= 1e-5) {
                hitp.normalHeight.xyz = normal.xyz;
            }

            // normalize normal again
            hitp.normalHeight.xyz = normalize(hitp.normalHeight.xyz);
            hitp.emission.xy = packHalf4x16(emission.xyzw).xy;
            hitp.albedo.xy = packHalf4x16(diffuse.xyzw).xy;
            hitp.metallicRoughness.xy = packHalf4x16(vec4(spc.yz, 0.f, 0.f).xyzw).xy;

            // simple mode (alternate)
            //hitp.albedo.xy = packHalf4x16(vec4(0.f, 0.f, 0.f, diffuse.w)).xy;
            //hitp.emission.xy = packHalf4x16(emission.xyzw + vec4(diffuse.xyz * max(dot(hitp.normalHeight.xyz, normalize(sphereLightPoint(0).xyz - rorigin.xyz)) * vec3(4.f.xxx), 0.f), 1.f)).xy;
            

            // additional validation of hit (hit point interpolated offset test)
            if (!overflow && globalID >= 0) 
            {
                int pid = hit.payloadID-1; if (pid < 0) pid = atomicIncIT();
                hitPayload[pid] = hitp;
                cray.origin.w = intBitsToFloat(globalID+1); // save hit index to ray

                // make payload ID
                if (hit.payloadID <= 0) {
                    hit.payloadID = pid+1;
#ifndef DMA_HIT
                    hits[globalID] = hit;
#endif
                }
            }
        }
    }
}
